/*******Reseteo*******/


/*****Estas son variables propias para agregar estilos mas facilmente******/
:root {
    --main-font: sans-serif;
    --font-size: 16px;
    --main-color: #f7df1e;
    --second-color: #222;
    --main-modal-color: rgba(247, 222, 30, 0.85);
    --second-modal-color: rgba(34, 34, 34, 0.85);
    --container-width: 1200px;
}
/*****Estas son variables propias para agregar estilos mas facilmente******/


html {
    box-sizing: border-box;
    font-family: var(--main-font);
    font-size: var(--font-size);
    scroll-behavior: smooth; /*Investigar su uso*/
}

*,
*:before, /*Before se usa para añador un elemento antes de... y after para añadir un elemento después de...(en este caso de TODO  por el asterisco)*/
*:after {
    box-sizing: inherit; 
    /*Box-sizing=> Por defecto en el modelo de caja de CSS, el ancho y alto asignado a un elemento 
    es aplicado solo al contenido de la caja del elemento. Si el elemento tiene algun borde (border)
    o relleno (padding), este es entonces añadido al ancho y alto a alcanzar el tamaño de la caja que
    es desplegada en pantalla. Esto significa que cuando se definen el ancho y alto, se tiene que 
    ajustar el valor definido para permitir cualquier borde o relleno que se pueda añadir.

La propiedad box-sizing puede ser usada para ajustar el siguiente comportamiento:

CONTENT-BOX: Es el comportamiento CSS por defecto para el tamaño de la caja (box-sizing). 
Si se define el ancho de un elemento en 100 pixeles, la caja del contenido del elemento 
tendrá 100 pixeles de ancho, y el ancho de cualquier borde o relleno ser añadirá al ancho final desplegado.

BORDER-BOX: Le dice al navegador tomar en cuenta para cualquier valor que se especifique de 
borde o de relleno para el ancho o alto de un elemento. Es decir, si se define un elemento 
con un ancho de 100 pixeles. Esos 100 pixeles incluíran cualquier borde o relleno que se añadan, 
y la caja de contenido se encogerá para absorber ese ancho extra. Esto típicamente hace mucho más 
fácil dimensionar elementos.*/
}

body {
    margin: 0;
    overflow-x: hidden; 
    /* todo lo que se desborde en horizontal se oculte y no genere barra de desplazamiento*/
    /*OVER-FLOW: especifica si recortar contenido, dibujar barras de desplazamiento 
    o mostrar el contenido excedente en un elemento a nivel de bloque.*/
}
 img { 
     max-width: 100%; /* Las imagenes se adapten a la max anchura del contenedor*/
     height: auto;
 }


                      /*****hamburguesa******/



.header {
    position: sticky; /*Hace que cuando el header llegue al 0 en top se mantenga fija*/
    padding: 1rem;
    background-color: var(--main-color);
    color: var(--second-color);
}


.header h1 {
    margin: 0 auto;
    text-align: center;
}

.section {
    padding: 2rem;
    padding-top: 4rem;
    margin-left: auto; /*para cuando al darle max anchura ese sea su max crecimiento*/
    margin-right: auto;
    width: 100%;
    max-width: var(--container-width); /*max crecimiento*/
    min-height: 100vh; /*ocupe el tamaño del vewport cada seccion*/
    text-align: center;
}

.panel {
    position: fixed;
    z-index: 998; /*NÚMERO EN QUE VA A ESTAR POSICIONADO ESTE ELEMENTO*/
    top: 0;
    bottom: 0;
    right: 0;
    left: 0;
    background-color: var(--second-modal-color);
    width: 100%;
    transition: transform 0.3s ease; /*para que transform tenga una transision leve*/
    transform: translate(-100%, 0);     /*salga de arriba*/
    

}

.panel.is-active { /*cuando este activa la transform haga lo sig*/
    transform: translate(0, 0); /*para quitar o vuelva a su posición 0*/
    
}

.panel-btn {
    position: fixed; /*Va a estar posiscionado de forma fija a 1 vh de distancia*/
    z-index: 999; /*indica el orden de un elemento posicionado y sus descendientes. Cuando varios elementos se superponen, los elementos con mayor valor z-index cubren aquellos con menor valor.*/ 
    bottom: 1vh;
    right: 1vw;
    width: 4rem;
    height: 4rem;
    border-radius: 50%;
    padding: 0;
    display: flex;
    justify-content: center;
    align-items: center;
    background-color: var(--main-color);
}

.menu {
    width: inherit; /*que menu herede la anchura del contenedor*/
    display: flex;
    flex-direction: column;
    justify-content: space-evenly; /*es lo que le da espaciado proporcional a los espacios entre elementos y orillas*/
    align-items: center;
    text-align: center;

}


.menu a {
    padding: 2rem;
    width: inherit; /*que menu herede la anchura del contenedor*/
    display: block;
    font-size: 1.5rem;
    text-decoration: none;
    color: var(--main-color);
    transition: all 0.3s ease; /*para que el estado hover no sea subito el cambio*/
        
}

.menu a:hover {
    font-weight: bold;
    color: var(--second-color);
    background-color: var(--main-modal-color);
}


/* {
    margin: 0;
    padding: 0;
    color: black;

}

.header {
    background-color: rgb(250, 250, 10);
    font-size: 25px;
    font-family: 'Franklin Gothic Medium', 'Arial Narrow', Arial, sans-serif;
    text-align: center;
    height: 5vh;
    width: 100%;
    padding: 15px;
    position: fixed;
}

.section {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;   
    font-weight:500;
    color: rgb(250, 250, 10);
    text-align: center;
    padding: 5% 0%;
}

.ham {
    background-color: #0a0a0a;
    opacity: 80%;
    height: 100vh;
    
}


img {
    width: 100%;
    height: 100%;
}

.hamburger {
    background-color: rgb(250, 250, 10);
    width: 20vh;
    height: 20vh;
    position: absolute;
    bottom: 0%;
    right: 0%;
    border: none;

}

.hamburger:hover {
    background-color: rgb(192, 192, 6);

}*/